// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/repo_interface.go

// Package mock_repository is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/sergeychur/avito_auto/internal/models"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// InsertLink mocks base method
func (m *MockRepository) InsertLink(link models.Link) (int, models.Link) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertLink", link)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(models.Link)
	return ret0, ret1
}

// InsertLink indicates an expected call of InsertLink
func (mr *MockRepositoryMockRecorder) InsertLink(link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertLink", reflect.TypeOf((*MockRepository)(nil).InsertLink), link)
}

// GetLink mocks base method
func (m *MockRepository) GetLink(shortcut string) (int, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLink", shortcut)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// GetLink indicates an expected call of GetLink
func (mr *MockRepositoryMockRecorder) GetLink(shortcut interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLink", reflect.TypeOf((*MockRepository)(nil).GetLink), shortcut)
}

// Start mocks base method
func (m *MockRepository) Start(maxConn, acquireTimeout int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", maxConn, acquireTimeout)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockRepositoryMockRecorder) Start(maxConn, acquireTimeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockRepository)(nil).Start), maxConn, acquireTimeout)
}

// Close mocks base method
func (m *MockRepository) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockRepositoryMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRepository)(nil).Close))
}
